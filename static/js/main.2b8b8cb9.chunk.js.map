{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["toolbarConfig","display","INLINE_STYLE_BUTTONS","label","style","className","BLOCK_TYPE_DROPDOWN","BLOCK_TYPE_BUTTONS","initMarkup","findLinkEntities","contentBlock","callback","contentState","findEntityRanges","character","entityKey","getEntity","getType","Link","props","url","getData","href","styles","link","children","findImageEntities","Image","height","src","width","root","fontFamily","padding","editor","border","cursor","minHeight","button","marginTop","textAlign","App","handleEditorChange","content","console","log","onRTEChange","value","setState","reactRTEState","onChange","toString","decorator","CompositeDecorator","strategy","component","blocksFromHTML","convertFromHTML","state","ContentState","createFromBlockArray","contentBlocks","entityMap","draftEditorState","DraftEditorState","createWithContent","RichTextEditor","createValueFromString","editorState","this","event","target","initialValue","init","menubar","plugins","toolbar","onEditorChange","ClassicEditor","data","onInit","onBlur","onFocus","Draft","onEditorStateChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2b8b8cb9.chunk.js","sourcesContent":["import React from 'react';\nimport { Editor as TinyMCEEditor } from '@tinymce/tinymce-react';\nimport CKEditor from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\nimport {\n  Editor as DraftEditor,\n  EditorState as DraftEditorState,\n  CompositeDecorator,\n  ContentBlock,\n  ContentState,\n  Editor,\n  EditorState,\n  convertFromHTML,\n  convertToRaw,\n} from 'draft-js';\nimport 'draft-js/dist/Draft.css';\nimport RichTextEditor from 'react-rte';\n\nimport { Editor as WSIWYGEEditor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\n\n\n// The toolbarConfig object allows you to specify custom buttons, reorder buttons and to add custom css classes.\n// Supported inline styles: https://github.com/facebook/draft-js/blob/master/docs/Advanced-Topics-Inline-Styles.md\n// Supported block types: https://github.com/facebook/draft-js/blob/master/docs/Advanced-Topics-Custom-Block-Render.md#draft-default-block-render-map\nconst toolbarConfig = {\n  // Optionally specify the groups to display (displayed in the order listed).\n  display: ['INLINE_STYLE_BUTTONS', 'BLOCK_TYPE_BUTTONS', 'LINK_BUTTONS', 'BLOCK_TYPE_DROPDOWN', 'HISTORY_BUTTONS'],\n  INLINE_STYLE_BUTTONS: [\n    {label: 'Bold', style: 'BOLD', className: 'custom-css-class'},\n    {label: 'Italic', style: 'ITALIC'},\n    {label: 'Underline', style: 'UNDERLINE'}\n  ],\n  BLOCK_TYPE_DROPDOWN: [\n    {label: 'Normal', style: 'unstyled'},\n    {label: 'Heading Large', style: 'header-one'},\n    {label: 'Heading Medium', style: 'header-two'},\n    {label: 'Heading Small', style: 'header-three'}\n  ],\n  BLOCK_TYPE_BUTTONS: [\n    {label: 'UL', style: 'unordered-list-item'},\n    {label: 'OL', style: 'ordered-list-item'}\n  ]\n};\n\nconst initMarkup = '<b>Bold text</b>, <i>Italic text</i><br/ ><br />' +\n    '<a href=\"https://www.facebook.com\">Example link</a><br /><br/ >' +\n    '<img src=\"https://raw.githubusercontent.com/facebook/draft-js/master/examples/draft-0-10-0/convertFromHTML/image.png\" height=\"112\" width=\"200\" />';\n\n\nfunction findLinkEntities(contentBlock, callback, contentState) {\n  contentBlock.findEntityRanges(\n      (character) => {\n        const entityKey = character.getEntity();\n        return (\n            entityKey !== null &&\n            contentState.getEntity(entityKey).getType() === 'LINK'\n        );\n      },\n      callback\n  );\n}\n\nconst Link = (props) => {\n  const {url} = props.contentState.getEntity(props.entityKey).getData();\n  return (\n      <a href={url} style={styles.link}>\n        {props.children}\n      </a>\n  );\n};\n\nfunction findImageEntities(contentBlock, callback, contentState) {\n  contentBlock.findEntityRanges(\n      (character) => {\n        const entityKey = character.getEntity();\n        return (\n            entityKey !== null &&\n            contentState.getEntity(entityKey).getType() === 'IMAGE'\n        );\n      },\n      callback\n  );\n}\n\nconst Image = (props) => {\n  const {\n    height,\n    src,\n    width,\n  } = props.contentState.getEntity(props.entityKey).getData();\n\n  return (\n      <img src={src} height={height} width={width} />\n  );\n};\n\nconst styles = {\n  root: {\n    fontFamily: '\\'Helvetica\\', sans-serif',\n    padding: 20,\n    width: 600,\n  },\n  editor: {\n    border: '1px solid #ccc',\n    cursor: 'text',\n    minHeight: 80,\n    padding: 10,\n  },\n  button: {\n    marginTop: 10,\n    textAlign: 'center',\n  },\n};\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    const decorator = new CompositeDecorator([\n      {\n        strategy: findLinkEntities,\n        component: Link,\n      },\n      {\n        strategy: findImageEntities,\n        component: Image,\n      },\n    ]);\n\n    const blocksFromHTML = convertFromHTML(initMarkup);\n    const state = ContentState.createFromBlockArray(\n        blocksFromHTML.contentBlocks,\n        blocksFromHTML.entityMap,\n    );\n\n    this.state = {\n      draftEditorState: DraftEditorState.createWithContent(\n          state,\n          decorator,\n      ),\n      reactRTEState: RichTextEditor.createValueFromString(initMarkup,'html'),\n      value: initMarkup\n    };\n    this.onChange = editorState => this.setState({editorState});\n  }\n\n  handleEditorChange = (content, editor) => {\n    console.log('Content was updated:', content);\n  };\n\n  onRTEChange = (value) => {\n    this.setState({reactRTEState: value});\n    if (this.props.onChange) {\n      // Send the changes up to the parent component as an HTML string.\n      // This is here to demonstrate using `.toString()` but in a real app it\n      // would be better to avoid generating a string on each change.\n      this.props.onChange(\n          value.toString('html')\n      );\n    }\n  };\n\n  render() {\n    return (\n        <>\n          <div>\n            <h1>Raw Textarea</h1>\n            <textarea\n               value={this.state.value}\n               onChange={(event) => {this.setState({value: event.target.value})}}\n            />\n          </div>\n\n          <div>\n            <h1>Tiny MCE</h1>\n            <TinyMCEEditor\n                initialValue={this.state.value}\n                init={{\n                  height: 500,\n                  menubar: false,\n                  plugins: [\n                    'advlist autolink lists link image charmap print preview anchor',\n                    'searchreplace visualblocks code fullscreen',\n                    'insertdatetime media table paste code help wordcount',\n                  ],\n                  toolbar:\n                      'undo redo | formatselect | bold italic backcolor | alignleft aligncenter alignright alignjustify |   bullist numlist outdent indent | removeformat | help',\n                }}\n                onEditorChange={this.handleEditorChange}\n            />\n          </div>\n\n          <div>\n            <h1>CK Editor</h1>\n            <CKEditor\n                editor={ ClassicEditor }\n                data={this.state.value}\n                onInit={ editor => {\n                  // You can store the \"editor\" and use when it is needed.\n                  console.log( 'Editor is ready to use!', editor );\n                } }\n                onChange={ ( event, editor ) => {\n                  const data = editor.getData();\n                  console.log( { event, editor, data } );\n                } }\n                onBlur={ ( event, editor ) => {\n                  console.log( 'Blur.', editor );\n                } }\n                onFocus={ ( event, editor ) => {\n                  console.log( 'Focus.', editor );\n                } }\n            />\n          </div>\n\n\n          <div>\n            <h1>React RTE</h1>\n            <RichTextEditor\n                value={this.state.reactRTEState}\n                onChange={this.onRTEChange}\n                toolbarConfig={toolbarConfig}\n            />\n\n          </div>\n\n          <div>\n            <h1>DraftJS  - core</h1>\n            <DraftEditor\n                editorState={this.state.draftEditorState}\n                onChange={this.onChange}\n            />\n          </div>\n\n\n          <div>\n            <h1>DraftJS WSIWYG</h1>\n            <WSIWYGEEditor\n                editorState={this.state.draftEditorState}\n                // toolbarClassName=\"toolbarClassName\"\n                // wrapperClassName=\"wrapperClassName\"\n                // editorClassName=\"editorClassName\"\n                onEditorStateChange={this.onChange}\n            />\n          </div>\n\n        </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}